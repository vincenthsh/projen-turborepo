import { javascript } from "projen";
import { synthProjectSnapshot, createProject, parseYaml } from "./util";
import { PNPM_VERSION } from "../src";

describe("TurborepoProject", () => {
  it("should add turborepo package as a development dependency", () => {
    expect.assertions(1);

    const project = createProject();
    const synth = synthProjectSnapshot(project);

    expect(synth["package.json"].devDependencies).toHaveProperty("turbo");
  });

  it("should add @vincenthsh scope to gh packages", () => {
    expect.assertions(1);

    const project = createProject();
    const synth = synthProjectSnapshot(project);

    expect(synth[".npmrc"]).toContain(
      "@vincenthsh:registry=https://npm.pkg.github.com/",
    );
  });

  it("should add itself as a development dependency", () => {
    expect.assertions(1);

    const project = createProject();
    const synth = synthProjectSnapshot(project);

    expect(synth["package.json"].devDependencies).toHaveProperty(
      "@vincenthsh/projen-turborepo",
    );
  });

  it("should set root package as private", () => {
    expect.assertions(1);

    const project = createProject();
    const synth = synthProjectSnapshot(project);

    expect(synth["package.json"].private).toBe(true);
  });

  it("should force pnpm node-linker to hoist for bundled deps", () => {
    expect.assertions(1);

    const project = createProject({
      bundledDeps: ["dotalias"],
    });
    const synth = synthProjectSnapshot(project);

    expect(synth[".npmrc"]).toContain("node-linker=hoisted");
  });

  it("should add turbo runs commands", () => {
    expect.assertions(1);

    const project = createProject();
    const synth = synthProjectSnapshot(project);
    const tasks: Record<string, unknown> = synth[".projen/tasks.json"].tasks;

    expect(tasks).toMatchSnapshot();
  });

  it("should create turbo config", () => {
    expect.assertions(1);

    const turbo = {
      tasks: {
        dev: {
          cache: false,
        },
      },
    };

    const project = createProject({ turbo });
    const synth = synthProjectSnapshot(project);

    expect(synth["turbo.json"]).toStrictEqual({
      "//": '~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".',
      $schema: "https://turbo.build/schema.json",
      ...turbo,
      tasks: {
        ...turbo.tasks,
        build: {
          dependsOn: ["^build"],
          outputs: ["build/**", "dist/**", "lib/**"],
        },
        compile: {
          dependsOn: ["^compile"],
          outputs: ["build/**", "dist/**", "lib/**"],
        },
        test: {
          dependsOn: ["^compile"],
          outputs: ["coverage/**", "test-reports/**"],
        },
        eslint: {
          outputs: [],
        },
        watch: {
          cache: false,
        },
      },
    });
  });

  it("should set the packageManager in package.json", () => {
    expect.assertions(1);

    const project = createProject({
      packageManager: javascript.NodePackageManager.PNPM,
    });
    const synth = synthProjectSnapshot(project);

    expect(synth["package.json"].packageManager).toBe("pnpm@" + PNPM_VERSION);
  });

  it("should not include sample code", () => {
    expect.assertions(2);

    const project = createProject();
    const synth = synthProjectSnapshot(project);

    expect(synth["src/index.ts"]).toBeUndefined();
    expect(synth["test/hello.test.ts"]).toBeUndefined();
  });

  it("should not run compile in the root project", () => {
    expect.assertions(1);

    const project = createProject();
    const synth = synthProjectSnapshot(project);

    expect(synth[".projen/tasks.json"].compile).toBeUndefined();
  });

  it("should set actions read permissions", () => {
    expect.assertions(1);

    const project = createProject();
    const synth = synthProjectSnapshot(project);

    expect(
      parseYaml(synth[".github/workflows/build.yml"]).jobs.turbo.permissions
        .actions,
    ).toBe("read");
  });

  it("should set packages read permissions", () => {
    const project = createProject();
    const synth = synthProjectSnapshot(project);

    expect(
      parseYaml(synth[".github/workflows/build.yml"]).jobs.build.permissions
        .packages,
    ).toBe("read");
    if (synth[".github/workflows/upgrade-main.yml"]) {
      expect(
        parseYaml(synth[".github/workflows/upgrade-main.yml"]).jobs.upgrade
          .permissions.packages,
      ).toBe("read");
    }
  });
});
